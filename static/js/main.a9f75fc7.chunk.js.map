{"version":3,"sources":["assets/win_blue.png","assets/win_red.png","assets/lose_blue.png","assets/lose_red.png","modules/firestore.js","components/LoadWords.js","components/Join.js","components/Host.js","components/Menu.js","components/End.js","components/Game.js","App.js","serviceWorker.js","modules/reducer.js","modules/store.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","LoadWords","props","state","loaded","collection","get","then","resp","words","topic","docs","data","version","setState","setWords","ProgressBar","now","this","label","Component","connect","dispatch","type","payload","Join","player_name","session_key","error_message","where","toUpperCase","length","stage","players","includes","doc","id","update","FieldValue","arrayUnion","setSession","key","setPlayer","cookie","save","db_id","Row","Col","Alert","variant","Form","Label","Control","onChange","e","target","value","Button","onClick","joinGame","name","VALID_CHARS","Host","Math","floor","random","add","teams","red","blue","round","board","ref","hostGame","topics","setRoom","Menu","mode","session","load","Card","Body","Header","genBody","Footer","titleCase","string","sentence","toLowerCase","split","i","slice","join","CIV_CARD","background","textAlign","BLACK_CARD","color","RED_CARD","BLUE_CARD","End","rows","r","row","map","c","style","push","Fragment","player_team","score","height","Image","src","win_red","lose_red","lose_blue","win_blue","Table","bordered","genBoard","BASIC_CARD","Game","onSnapshot","includeMetadataChanges","exists","updateGame","remove","clearGame","count","guesses","lobby","game","startGame","switchTeams","delete","arrayRemove","word","Array","fill","used","spot","turn","bonus","setTeam","versions","l","as","changeVersion","getGameVersions","ListGroup","Item","b","giveGuesses","newTurn","genFooter","team","App","rel","href","integrity","crossOrigin","db_updated","debug","Boolean","window","location","hostname","match","initialState","codeNamesReducer","action","console","log","newState","_","cloneDeep","chameleon","role","reduxStore","REDUX_INITIAL_DATA","createStore","reducer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9f75fc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/win_blue.aa72455c.png\";","module.exports = __webpack_public_path__ + \"static/media/win_red.0b56df4b.png\";","module.exports = __webpack_public_path__ + \"static/media/lose_blue.720ef19d.png\";","module.exports = __webpack_public_path__ + \"static/media/lose_red.1e19f9fb.png\";","import firebase from 'firebase/app';\r\nimport firestore from 'firebase/firestore'; // eslint-disable-line no-unused-vars\r\n\r\nvar firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FS_API_KEY,\r\n    authDomain: process.env.REACT_APP_FS_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_FS_DB_URL,\r\n    projectId: process.env.REACT_APP_FS_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FS_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FS_MESSAGE_ID,\r\n    appId: process.env.REACT_APP_FS_MEASURE_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase.firestore();\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\n\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nclass LoadWords extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        firestore.collection(\"words\").get().then(resp => {\r\n            let words = {}\r\n            for (let topic in resp.docs) {\r\n                let data = resp.docs[topic].data()\r\n                words[data.version] = data.words\r\n            }\r\n            this.setState({loaded: 100})\r\n            this.props.setWords(words)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ProgressBar now={this.state.loaded} label={this.state.loaded+\"%\"}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setWords: (words) => dispatch({\r\n        type: \"set_words\",\r\n        payload: words\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadWords);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\nimport firebase from \"firebase/app\";\r\nimport cookie from \"react-cookies\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nclass Join extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            player_name: \"\",\r\n            session_key: \"\",\r\n            error_message: \"\"\r\n        };\r\n    }\r\n\r\n    joinGame() {\r\n        if (this.state.player_name) {\r\n            if (this.state.session_key) {\r\n                firestore.collection(\"sessions\").where(\"key\", \"==\", this.state.session_key.toUpperCase()).get().then(resp => {\r\n                    if (resp.docs.length === 1) {\r\n                        if (resp.docs[0].data().stage !== \"lobby\") {\r\n                            this.setState({error_message: \"Please wait for the current round to finish before attempting to join.\"})\r\n                        } else if (resp.docs[0].data().players.includes(this.state.player_name)) {\r\n                            this.setState({error_message: \"Player name is unavaliable.\"})\r\n                        } else {\r\n                            firestore.collection(\"sessions\").doc(resp.docs[0].id).update({\r\n                                players: firebase.firestore.FieldValue.arrayUnion(this.state.player_name)\r\n                            })\r\n                            this.props.setSession(resp.docs[0].data().key, resp.docs[0].id);\r\n                            this.props.setPlayer(this.state.player_name);\r\n                            cookie.save(\"cn_session\", {key: resp.docs[0].data().key, db_id: resp.docs[0].id})\r\n                            cookie.save(\"cn_player\", this.state.player_name)\r\n                        }\r\n                    } else {\r\n                        this.setState({error_message: \"Session key does not exist.\"})\r\n                    }\r\n                })\r\n            } else {\r\n                this.setState({error_message: \"Enter a session key.\"})\r\n            }\r\n        } else {\r\n            this.setState({error_message: \"Enter a Name!\"})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.error_message ?\r\n                    <Row><Col>\r\n                        <Alert variant=\"danger\">\r\n                            {this.state.error_message}\r\n                        </Alert>\r\n                    </Col></Row>\r\n                : null}\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label> Session Key: </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control onChange={(e) => this.setState({session_key: e.target.value})}/>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label> Player Name: </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control onChange={(e) => this.setState({player_name: e.target.value})}/>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <Row>\r\n                    <Button onClick={() => this.joinGame()}>\r\n                        Join Game\r\n                    </Button>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setSession: (key, db_id) => dispatch({\r\n        type: \"set_session\",\r\n        payload: {\r\n            key: key,\r\n            db_id: db_id\r\n        }\r\n    }),\r\n    setPlayer: (name) => dispatch({\r\n        type: \"set_player\",\r\n        payload: name\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Join);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\nimport cookie from \"react-cookies\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst VALID_CHARS = \"ABCDEFGHJKLMNOPQRSTUVWXYZ98765432\"\r\n\r\nclass Host extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            player_name: \"\",\r\n            error_message: \"\"\r\n        };\r\n    }\r\n\r\n    hostGame() {\r\n        if (this.state.player_name) {\r\n            let key = VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)] + VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)] + VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)] + VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)]\r\n            firestore.collection(\"sessions\").add({\r\n                players: [this.state.player_name],\r\n                teams: {red: [], blue: []},\r\n                key: key,\r\n                stage: \"lobby\",\r\n                version: \"classic\",\r\n                round: {\r\n                    id: 0,\r\n                    words: [],\r\n                    board: []\r\n                }\r\n            }).then(ref => {\r\n                this.props.setSession(key, ref.id)\r\n                this.props.setPlayer(this.state.player_name);\r\n                cookie.save(\"cn_session\", {key: key, db_id: ref.id})\r\n                cookie.save(\"cn_player\", this.state.player_name)\r\n            })\r\n        } else {\r\n            this.setState({error_message: \"Enter a Name!\"})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.error_message ?\r\n                    <Row><Col>\r\n                        <Alert variant=\"danger\">\r\n                            {this.state.error_message}\r\n                        </Alert>\r\n                    </Col></Row>\r\n                : null}\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label> Player Name: </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control onChange={(e) => this.setState({player_name: e.target.value})}/>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Button onClick={() => this.hostGame()}>\r\n                        Host Game\r\n                    </Button>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    topics: state.topics\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setRoom: (topics) => dispatch({\r\n        type: \"set_topics\",\r\n        payload: topics\r\n    }),\r\n    setSession: (key, db_id) => dispatch({\r\n        type: \"set_session\",\r\n        payload: {\r\n            key: key,\r\n            db_id: db_id\r\n        }\r\n    }),\r\n    setPlayer: (name) => dispatch({\r\n        type: \"set_player\",\r\n        payload: name\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Host);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport cookie from \"react-cookies\";\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport Join from \"./Join.js\";\r\nimport Host from \"./Host.js\"\r\n\r\nclass Menu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let session = cookie.load(\"cn_session\");\r\n        let name = cookie.load(\"cn_player\");\r\n        if (session && session.key && session.db_id && name) {\r\n                this.props.setSession(session);\r\n                this.props.setPlayer(name);\r\n        }\r\n    }\r\n\r\n    genBody() {\r\n        switch(this.state.mode) {\r\n            case \"join\":\r\n                return (\r\n                    <Card.Body>\r\n                        <Join/>\r\n                    </Card.Body>\r\n                );\r\n            case \"host\":\r\n                return (\r\n                    <Card.Body>\r\n                        <Host/>\r\n                    </Card.Body>\r\n                );\r\n            default:\r\n                return (\r\n                    <Card.Body>\r\n                    <Row>\r\n                        <Col/>\r\n                        <Col>\r\n                            <Button variant=\"success\" onClick={() => this.setState({mode: \"join\"})}>\r\n                                Join\r\n                            </Button>\r\n                        </Col>\r\n                        <Col/>\r\n                        <Col>\r\n                            <Button variant=\"warning\" onClick={() => this.setState({mode: \"host\"})}>\r\n                                Host\r\n                            </Button>\r\n                        </Col>\r\n                        <Col/>\r\n                    </Row>\r\n                    </Card.Body>\r\n                );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Card.Header>\r\n                        Code Names\r\n                    </Card.Header>\r\n                    {this.genBody()}\r\n                    <Card.Footer>\r\n                        {this.state.mode !== \"\" ?\r\n                            <Button variant=\"dark\" onClick={() => this.setState({mode: \"\"})}>\r\n                                Back\r\n                            </Button>\r\n                        :\r\n                            null\r\n                        }\r\n                    </Card.Footer>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setSession: (session) => dispatch({\r\n        type: \"set_session\",\r\n        payload: session\r\n    }),\r\n    setPlayer: (name) => dispatch({\r\n        type: \"set_player\",\r\n        payload: name\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Image from \"react-bootstrap/Image\";\r\n\r\nimport win_blue from \"../assets/win_blue.png\";\r\nimport win_red from \"../assets/win_red.png\";\r\nimport lose_blue from \"../assets/lose_blue.png\";\r\nimport lose_red from \"../assets/lose_red.png\";\r\n\r\nfunction titleCase(string) {\r\n    if (!string) return \"\";\r\n    let sentence = string.toLowerCase().split(\" \");\r\n    for(let i = 0; i< sentence.length; i++){\r\n        sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\r\n    }\r\n    return sentence.join(\" \");\r\n}\r\n\r\n//Duplicated form Game\r\nconst CIV_CARD = {\r\n    background: \"#ffeecc\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst BLACK_CARD = {\r\n    background: \"black\",\r\n    color: \"white\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst RED_CARD = {\r\n    background: \"#ffb3b3\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst BLUE_CARD = {\r\n    background: \"#99c2ff\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nclass End extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    genBoard() {\r\n        let rows = [];\r\n        for (let r in [0,1,2,3,4]) {\r\n            let row = <tr key={\"r\"+r}>\r\n                {[0,1,2,3,4].map((c) => {\r\n                    let style = CIV_CARD;\r\n                    if (this.props.round.board[r*5 + c] === \"A\") {\r\n                        style = BLACK_CARD;\r\n                    } else if (this.props.round.board[r*5 + c] === \"R\") {\r\n                        style = RED_CARD;\r\n                    } else if (this.props.round.board[r*5 + c] === \"B\") {\r\n                        style = BLUE_CARD;\r\n                    }\r\n                    return <td id={r*4 + c} style={style} key={\"i\"+(r*5 + c)}>\r\n                        <strong>{titleCase(this.props.round.words[r*5 + c])}</strong>\r\n                    </td>\r\n                })}\r\n            </tr>\r\n            rows.push(row)\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    render() {\r\n        return (<React.Fragment>\r\n            <Row key={\"you\"}>\r\n                <Col>\r\n                    <Alert variant={this.props.player_team === \"red\" ? \"danger\" : \"primary\"}>\r\n                        {(((this.props.teams.red[this.props.round.id % this.props.teams.red.length] === this.props.player_name) || (this.props.teams.blue[this.props.round.id % this.props.teams.blue.length] === this.props.player_name)) ? \"Codemaster \" : \"Agent \") + titleCase(this.props.player_name)}\r\n                    </Alert>\r\n                </Col>\r\n                <Col>\r\n                    <Alert variant=\"dark\">\r\n                        {\"Red Score: \" + this.props.score.red}\r\n                    </Alert>\r\n                </Col>\r\n                <Col>\r\n                    <Alert variant=\"dark\">\r\n                        {\"Blue Score: \" + this.props.score.blue}\r\n                    </Alert>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{height: \"20vh\"}}>\r\n                {this.props.player_team === \"red\" ?\r\n                    <Col>\r\n                        {((!(this.props.round.id % 2) && (this.props.score.red > this.props.score.blue)) || ((this.props.round.id % 2) && (this.props.score.red >= this.props.score.blue))) ?\r\n                            <Image src={win_red} style={{height: \"20vh\"}}/>\r\n                        :\r\n                            <Image src={lose_red} style={{height: \"20vh\"}}/>\r\n                        }\r\n                    </Col>\r\n                :\r\n                <Col>\r\n                    {((!(this.props.round.id % 2) && (this.props.score.red > this.props.score.blue)) || ((this.props.round.id % 2) && (this.props.score.red >= this.props.score.blue))) ?\r\n                        <Image src={lose_blue} style={{height: \"20vh\"}}/>\r\n                    :\r\n                        <Image src={win_blue} style={{height: \"20vh\"}}/>\r\n                    }\r\n                </Col>\r\n                }\r\n            </Row>\r\n            <br/>\r\n            <Row key={\"board\"}>\r\n                <Col>\r\n                    <Table bordered>\r\n                        <tbody>\r\n                            {this.genBoard()}\r\n                        </tbody>\r\n                    </Table>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>);\r\n    }\r\n}\r\n\r\n// <Row>\r\n//     <Col>\r\n//         <Table bordered>\r\n//             <tbody>\r\n//                 {this.genBoard()}\r\n//             </tbody>\r\n//         </Table>\r\n//     </Col>\r\n// </Row>\r\n\r\nconst mapStateToProps = state => ({\r\n    player_name: state.player_name,\r\n    player_team: state.player_team,\r\n    players: state.players,\r\n    teams: state.teams,\r\n    round: state.round,\r\n    score: state.score,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(End);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\nimport cookie from \"react-cookies\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nimport End from \"./End.js\";\r\n\r\nfunction titleCase(string) {\r\n    if (!string) return \"\";\r\n    let sentence = string.toLowerCase().split(\" \");\r\n    for(let i = 0; i< sentence.length; i++){\r\n        sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\r\n    }\r\n    return sentence.join(\" \");\r\n}\r\n\r\nconst BASIC_CARD = {\r\n    background: \"white\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst CIV_CARD = {\r\n    background: \"#ffeecc\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst BLACK_CARD = {\r\n    background: \"black\",\r\n    color: \"white\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst RED_CARD = {\r\n    background: \"#ffb3b3\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst BLUE_CARD = {\r\n    background: \"#99c2ff\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Set up listener (May need to put this in a promise later)\r\n        firestore.collection(\"sessions\").doc(this.props.session.db_id)\r\n            .onSnapshot({includeMetadataChanges: true}, (doc) => {\r\n                if (doc.exists) {\r\n                    this.props.updateGame(doc.data());\r\n                } else {\r\n                    cookie.remove(\"cn_player\");\r\n                    cookie.remove(\"cn_session\");\r\n                    this.props.clearGame();\r\n                }\r\n            })\r\n    }\r\n\r\n    giveGuesses(count) {\r\n        firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n            guesses: count\r\n        })\r\n    }\r\n\r\n    genBody() {\r\n        switch(this.props.stage) {\r\n            case \"lobby\":\r\n                return this.lobby();\r\n            case \"game\":\r\n                return this.game();\r\n            case \"results\":\r\n                return <End/>;\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    genFooter() {\r\n        switch(this.props.stage) {\r\n            case \"lobby\":\r\n                if (this.props.players[0] === this.props.player_name) {\r\n                    //HOST ONLY\r\n                    return(<Row>\r\n                        <Col>\r\n                            <Button onClick={() => this.startGame()}>Start Game</Button>\r\n                        </Col>\r\n                        {this.props.player_team ?\r\n                            <Col>\r\n                                <Button variant={this.props.player_team === \"red\" ? \"primary\" : \"danger\"} onClick={() => this.switchTeams()}>Switch Teams</Button>\r\n                            </Col>\r\n                        :null}\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                //End Game\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).delete()\r\n                            }}>End Game</Button>\r\n                        </Col>\r\n                    </Row>)\r\n                } else {\r\n                    return(<Row>\r\n                        {this.props.player_team ?\r\n                            <Col>\r\n                                <Button variant={this.props.player_team === \"red\" ? \"primary\" : \"danger\"} onClick={() => this.switchTeams()}>Switch Teams</Button>\r\n                            </Col>\r\n                        :null}\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                    players: firebase.firestore.FieldValue.arrayRemove(this.props.player_name),\r\n                                    \"teams.red\": firebase.firestore.FieldValue.arrayRemove(this.props.player_name),\r\n                                    \"teams.blue\": firebase.firestore.FieldValue.arrayRemove(this.props.player_name)\r\n                                }).then(() => {\r\n                                    cookie.remove(\"cn_player\");\r\n                                    cookie.remove(\"cn_session\");\r\n                                    this.props.clearGame();\r\n                                })\r\n                            }}>\r\n                                Leave Game\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>)\r\n                }\r\n            case \"game\":\r\n                if (this.props.players[0] === this.props.player_name) {\r\n                    //HOST ONLY\r\n                    return (<Row>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                    stage: \"lobby\",\r\n                                })\r\n                            }}>\r\n                                Return to Lobby\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>)\r\n                }\r\n                break;\r\n            case \"results\":\r\n                if (this.props.players[0] === this.props.player_name) {\r\n                    return (<Row>\r\n                        <Col>\r\n                            <Button onClick={() => this.startGame()}>Next Round</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                    stage: \"lobby\",\r\n                                })\r\n                            }}>\r\n                                Return to Lobby\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                //End Game\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).delete()\r\n                            }}>End Game</Button>\r\n                        </Col>\r\n                    </Row>)\r\n                } else {\r\n                    return (<Button onClick={() => {\r\n                        firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                            players: firebase.firestore.FieldValue.arrayRemove(this.props.player_name),\r\n                            \"teams.red\": firebase.firestore.FieldValue.arrayRemove(this.props.player_name),\r\n                            \"teams.blue\": firebase.firestore.FieldValue.arrayRemove(this.props.player_name)\r\n                        }).then(() => {\r\n                            cookie.remove(\"cn_player\");\r\n                            cookie.remove(\"cn_session\");\r\n                            this.props.clearGame();\r\n                        })\r\n                    }}>\r\n                        Leave Game\r\n                    </Button>)\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    startGame() {\r\n        //Start Game\r\n\r\n        if (this.props.players < 4 || this.props.teams.red.length < 2 || this.props.teams.blue.length < 2) return null;\r\n\r\n        let words = [];\r\n        // console.log(this.props.words[this.props.version])\r\n        while (words.length < 25) {\r\n            let word = this.props.words[this.props.version][Math.floor(Math.random()*this.props.words[this.props.version].length)];\r\n            if (!words.includes(word)) {\r\n                words.push(word)\r\n            }\r\n        }\r\n        // console.log(words);\r\n        let board = Array(25).fill(\"C\");\r\n        let used = []\r\n        let spot = Math.floor(Math.random()*25);\r\n        board[spot] = \"A\";\r\n        used.push(spot);\r\n        while (used.length < 10) {\r\n            spot = Math.floor(Math.random()*25);\r\n            if (!used.includes(spot)) {\r\n                used.push(spot);\r\n                board[spot] = (this.props.round.id % 2) ? \"B\" : \"R\";\r\n            }\r\n        }\r\n        while (used.length < 18) {\r\n            spot = Math.floor(Math.random()*25);\r\n            if (!used.includes(spot)) {\r\n                used.push(spot);\r\n                board[spot] = (this.props.round.id % 2) ? \"R\" : \"B\";\r\n            }\r\n        }\r\n        // console.log(board)\r\n        firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n            version: this.props.version,\r\n            stage: \"game\",\r\n            \"round.words\": words,\r\n            \"round.board\": board,\r\n            \"round.guesses\": Array(25).fill(\"\"),\r\n            turn: (this.props.round.id % 2) ? \"B\" : \"R\",\r\n            guesses: 0,\r\n            score: {red: 0, blue: 0},\r\n            bonus: false,\r\n        })\r\n    }\r\n\r\n    switchTeams() {\r\n        if (this.props.player_team === \"red\") {\r\n            firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                \"teams.red\": firebase.firestore.FieldValue.arrayRemove(this.props.player_name),\r\n                \"teams.blue\": firebase.firestore.FieldValue.arrayUnion(this.props.player_name),\r\n            }).then(() => {\r\n                this.props.setTeam(\"blue\");\r\n            });\r\n        } else {\r\n            firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                \"teams.blue\": firebase.firestore.FieldValue.arrayRemove(this.props.player_name),\r\n                \"teams.red\": firebase.firestore.FieldValue.arrayUnion(this.props.player_name),\r\n            }).then(() => {\r\n                this.props.setTeam(\"red\");\r\n            });\r\n        }\r\n    }\r\n\r\n    getGameVersions() {\r\n        let versions = [];\r\n        for (let l in this.props.words) {\r\n            versions.push(<option key={l} label={titleCase(l)} value={l}/>)\r\n        }\r\n        return versions;\r\n    }\r\n\r\n    lobby() {\r\n        let lobby = [];\r\n        if (this.props.player_team) {\r\n            lobby.push(<Alert variant=\"info\" key=\"code\">{\"Room Code: \"+this.props.session.key}</Alert>);\r\n            if (this.props.players[0] === this.props.player_name) {\r\n                lobby.push(<Row key=\"mode\">\r\n                    <Col>\r\n                        <Form.Label>\r\n                            <Alert variant=\"dark\">Game Version:</Alert>\r\n                        </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control as=\"select\" value={this.props.version} onChange={(e) => this.props.changeVersion(e.target.value)}>\r\n                            {this.getGameVersions()}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Row>);\r\n            }\r\n            for (let r in this.props.teams.red) {\r\n                lobby.push(<ListGroup.Item  variant=\"danger\" key={this.props.teams.red[r]}>\r\n                    {this.props.teams.red[r]}\r\n                </ListGroup.Item>)\r\n            }\r\n            for (let b in this.props.teams.blue) {\r\n                lobby.push(<ListGroup.Item  variant=\"primary\" key={this.props.teams.blue[b]}>\r\n                    {this.props.teams.blue[b]}\r\n                </ListGroup.Item>)\r\n            }\r\n        } else {\r\n            lobby.push(<Row key=\"pick_team\">\r\n                <Col>\r\n                    <Button variant=\"danger\" onClick={() => {\r\n                        firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                            \"teams.red\": firebase.firestore.FieldValue.arrayUnion(this.props.player_name),\r\n                        }).then(() => {\r\n                            this.props.setTeam(\"red\");\r\n                        });\r\n                    }}>\r\n                        Join RED Team\r\n                    </Button>\r\n                </Col>\r\n                    <Button variant=\"primary\" onClick={() => {\r\n                        firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                            \"teams.blue\": firebase.firestore.FieldValue.arrayUnion(this.props.player_name),\r\n                        }).then(() => {\r\n                            this.props.setTeam(\"blue\")\r\n                        });\r\n                    }}>\r\n                        Join BLUE Team\r\n                    </Button>\r\n                <Col>\r\n                </Col>\r\n            </Row>)\r\n        }\r\n        return lobby;\r\n    }\r\n\r\n    game() {\r\n        let game = []\r\n        game.push(<Row key={\"you\"}>\r\n            <Col>\r\n                <Alert variant={this.props.player_team === \"red\" ? \"danger\" : \"primary\"}>\r\n                    {(((this.props.teams.red[this.props.round.id % this.props.teams.red.length] === this.props.player_name) || (this.props.teams.blue[this.props.round.id % this.props.teams.blue.length] === this.props.player_name)) ? \"Codemaster \" : \"Agent \") + titleCase(this.props.player_name)}\r\n                </Alert>\r\n            </Col>\r\n        </Row>);\r\n        game.push(<Row key={\"scores\"}>\r\n            <Col>\r\n                <Alert variant=\"dark\">\r\n                    {\"Red Score: \" + this.props.score.red}\r\n                </Alert>\r\n            </Col>\r\n            <Col>\r\n                <Alert variant=\"dark\">\r\n                    {\"Blue Score: \" + this.props.score.blue}\r\n                </Alert>\r\n            </Col>\r\n        </Row>);\r\n        game.push(<Row key=\"board+role\">\r\n            <Col>\r\n                <Table bordered>\r\n                    <tbody>\r\n                        {this.genBoard()}\r\n                    </tbody>\r\n                </Table>\r\n            </Col>\r\n        </Row>)\r\n        game.push(<Row key={\"players\"}>\r\n            <Col>\r\n                <Alert variant=\"dark\">{this.props.guesses === 0 ? (this.props.turn===\"R\" ? \"Red\":\"Blue\")+\" Codemaster is giving a hint.\" : (this.props.turn===\"R\" ? \"Red\":\"Blue\")+\" team is making guesses.\"}</Alert>\r\n            </Col>\r\n        </Row>);\r\n        if (this.props.guesses === 0 && ((this.props.turn===\"R\" ? \"red\":\"blue\") === this.props.player_team) && ((this.props.teams.red[this.props.round.id % this.props.teams.red.length] === this.props.player_name) || (this.props.teams.blue[this.props.round.id % this.props.teams.blue.length] === this.props.player_name))) {\r\n            game.push(<div key={\"guesses\"}>\r\n                {((((this.props.turn === \"R\") && (this.props.teams.red[this.props.round.id % this.props.teams.red.length] === this.props.player_name))\r\n                || ((this.props.turn === \"B\") && (this.props.teams.blue[this.props.round.id % this.props.teams.blue.length] === this.props.player_name)))\r\n                && (this.props.guesses === 0)) ?\r\n                    <Row>\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 9 : 8)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 9 : 8)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(1);\r\n                            }}>1</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 8 : 7)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 8 : 7)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(2);\r\n                            }}>2</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 7 : 6)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 7 : 6)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(3);\r\n                            }}>3</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 6 : 5)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 6 : 5)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(4);\r\n                            }}>4</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 5 : 4)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 5 : 4)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(5);\r\n                            }}>5</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 4 : 3)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 4 : 3)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(6);\r\n                            }}>6</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 3 : 2)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 3 : 2)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(7);\r\n                            }}>7</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 2 : 1)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 2 : 1)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(8);\r\n                            }}>8</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 1 : 0)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 1 : 0)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(9);\r\n                            }}>9</Button>\r\n                        </Col>\r\n                    : null}\r\n                    </Row>\r\n                : null}\r\n            </div>);\r\n        }\r\n        if (this.props.guesses > 0) {\r\n            if (this.props.bonus) {\r\n                game.push(\r\n                    <Row key=\"info_guesses\">\r\n                        <Col>\r\n                            <Alert variant=\"dark\">{(this.props.turn===\"R\" ? \"Red\":\"Blue\")+\" team has a Bonus Guess!\"}</Alert>\r\n                        </Col>\r\n                        {(((this.props.player_team === \"red\" && this.props.turn === \"R\") || (this.props.player_team === \"blue\" && this.props.turn === \"B\")) && !((this.props.teams.red[this.props.round.id % this.props.teams.red.length] === this.props.player_name) || (this.props.teams.blue[this.props.round.id % this.props.teams.blue.length] === this.props.player_name))) ?\r\n                            <Col>\r\n                                <Button onClick={()=> {\r\n                                    let newTurn = (this.props.player_team === \"blue\") ? \"R\" : \"B\";\r\n                                    firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                        guesses: 0,\r\n                                        bonus: false,\r\n                                        turn: newTurn,\r\n                                    })\r\n                                }}>Skip Bonus Guess</Button>\r\n                            </Col>\r\n                        :\r\n                            null\r\n                        }\r\n                    </Row>\r\n                );\r\n            } else {\r\n                game.push(\r\n                    <Row key=\"info_guesses\">\r\n                        <Col>\r\n                            <Alert variant=\"dark\">{(this.props.turn===\"R\" ? \"Red\":\"Blue\")+\" team has \" + this.props.guesses + \" guesses remaining.\"}</Alert>\r\n                        </Col>\r\n                    </Row>\r\n                );\r\n            }\r\n        }\r\n        return game;\r\n    }\r\n\r\n    genBoard() {\r\n        let rows = []\r\n        //if codemaster\r\n        if ((this.props.teams.red[this.props.round.id % this.props.teams.red.length] === this.props.player_name) || (this.props.teams.blue[this.props.round.id % this.props.teams.blue.length] === this.props.player_name)) {\r\n            for (let r in [0,1,2,3,4]) {\r\n                let row = <tr key={\"r\"+r}>\r\n                    {[0,1,2,3,4].map((c) => {\r\n                        let style = CIV_CARD;\r\n                        if (this.props.round.board[r*5 + c] === \"A\") {\r\n                            style = BLACK_CARD;\r\n                        } else if (this.props.round.board[r*5 + c] === \"R\") {\r\n                            style = RED_CARD;\r\n                        } else if (this.props.round.board[r*5 + c] === \"B\") {\r\n                            style = BLUE_CARD;\r\n                        }\r\n                        return <td id={r*4 + c} style={style} key={\"i\"+(r*5 + c)}>\r\n                            {(this.props.round.guesses[r*5 + c]) ?\r\n                                <del>{titleCase(this.props.round.words[r*5 + c])}</del>\r\n                            :\r\n                                <strong>{titleCase(this.props.round.words[r*5 + c])}</strong>\r\n                            }\r\n                        </td>\r\n                    })}\r\n                </tr>\r\n                rows.push(row)\r\n            }\r\n        } else {\r\n            for (let r in [0,1,2,3,4]) {\r\n                let row = <tr key={\"r\"+r}>\r\n                    {[0,1,2,3,4].map((c) => {\r\n                        let style = BASIC_CARD;\r\n                        if (this.props.round.guesses[r*5 + c]) {\r\n                            if (this.props.round.board[r*5 + c] === \"A\") {\r\n                                style = BLACK_CARD;\r\n                            } else if (this.props.round.board[r*5 + c] === \"R\") {\r\n                                style = RED_CARD;\r\n                            } else if (this.props.round.board[r*5 + c] === \"B\") {\r\n                                style = BLUE_CARD;\r\n                            } else {\r\n                                style = CIV_CARD;\r\n                            }\r\n                        }\r\n                        return <td id={r*5 + c} style={style} key={\"i\"+(r*5 + c)}\r\n                        onClick={()=> {\r\n                            if ((this.props.turn === \"R\" && this.props.player_team === \"red\") || (this.props.turn === \"B\" && this.props.player_team === \"blue\")) {//Verify that you can actually make the guess (avoid errors on simult guessing)\r\n                            firestore.collection(\"sessions\").doc(this.props.session.db_id).get().then(doc => {\r\n                                let data = doc.data();\r\n                                let newTurn = (data.turn === \"R\") ? \"R\" : \"B\";\r\n                                if (data.guesses > 0 && !data.round.guesses[r*5 + c]) {\r\n                                    data.round.guesses[r*5 + c] = \"X\";\r\n                                    data.guesses = data.guesses - 1;\r\n                                    switch (data.round.board[r*5 + c]) {\r\n                                        case \"A\": {\r\n                                            data.guesses = 0;\r\n                                            data.stage = \"results\";\r\n                                            data.round.id = data.round.id + 1\r\n                                            if (this.props.player_team === \"red\") {\r\n                                                data.score.red = -1;\r\n                                                //data.score.blue = ((this.props.round.id % 2) ? 9 : 8);\r\n                                            } else {\r\n                                                //data.score.red = (!(this.props.round.id % 2) ? 9 : 8);\r\n                                                data.score.blue = -1;\r\n                                            }\r\n                                            break;\r\n                                        }\r\n                                        case \"R\": {\r\n                                            data.score.red += 1;\r\n                                            if (this.props.player_team === \"blue\") {\r\n                                                newTurn = \"R\";\r\n                                                data.guesses = 0;\r\n                                                data.bonus = false;\r\n                                            }\r\n                                            break;\r\n                                        }\r\n                                        case \"B\": {\r\n                                            data.score.blue += 1;\r\n                                            if (this.props.player_team === \"red\") {\r\n                                                newTurn = \"B\";\r\n                                                data.guesses = 0;\r\n                                                data.bonus = false;\r\n                                            }\r\n                                            break;\r\n                                        }\r\n                                        case \"C\": {\r\n                                            data.guesses = 0;\r\n                                            data.bonus = false;\r\n                                            if (data.turn === \"R\") {\r\n                                                newTurn = \"B\";\r\n                                            } else {\r\n                                                newTurn = \"R\";\r\n                                            }\r\n                                            break;\r\n                                        }\r\n                                        default: {\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    if (data.guesses <= 0 && (((this.props.player_team === \"red\") && (data.round.board[r*5 + c] === \"R\")) || ((this.props.player_team === \"blue\") && (data.round.board[r*5 + c] === \"B\")))) {\r\n                                        if (!data.bonus) {\r\n                                            data.bonus = true;\r\n                                            data.guesses = 1;\r\n                                        } else {\r\n                                            newTurn = (this.props.player_team === \"blue\") ? \"R\" : \"B\";\r\n                                            data.bonus = false;\r\n                                        }\r\n                                    }\r\n                                    if (data.score.red >= (!(this.props.round.id % 2) ? 9 : 8) || data.score.blue >= ((this.props.round.id % 2) ? 9 : 8)) {\r\n                                        data.stage = \"results\";\r\n                                        data.round.id = data.round.id + 1\r\n                                    }\r\n                                    firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                        guesses: data.guesses,\r\n                                        \"round.guesses\": data.round.guesses,\r\n                                        turn: newTurn,\r\n                                        score: data.score,\r\n                                        stage: data.stage,\r\n                                        \"round.id\": data.round.id,\r\n                                        bonus: data.bonus,\r\n                                    })\r\n                                }\r\n                            })}\r\n                        }}>\r\n                            <strong>{titleCase(this.props.round.words[r*5 + c])}</strong>\r\n                        </td>\r\n                    })}\r\n                </tr>\r\n                rows.push(row)\r\n            }\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Card.Header>\r\n                        {titleCase(this.props.stage)}\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        {this.genBody()}\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        {this.genFooter()}\r\n                    </Card.Footer>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    session: state.session,\r\n    player_name: state.player_name,\r\n    player_team: state.player_team,\r\n    stage: state.stage,\r\n    players: state.players,\r\n    teams: state.teams,\r\n    words: state.words,\r\n    version: state.version,\r\n    round: state.round,\r\n    turn: state.turn,\r\n    guesses: state.guesses,\r\n    score: state.score,\r\n    bonus: state.bonus,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateGame: (doc) => dispatch({\r\n        type: \"update_game\",\r\n        payload: doc\r\n    }),\r\n    clearGame: () => dispatch({\r\n        type: \"clear_game\",\r\n        payload: null\r\n    }),\r\n    changeVersion: (version) => dispatch({\r\n        type: \"set_version\",\r\n        payload: version\r\n    }),\r\n    setTeam: (team) => dispatch({\r\n        type: \"set_team\",\r\n        payload: team\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\r\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\n\nimport LoadWords from \"./components/LoadWords.js\";\nimport Menu from \"./components/Menu.js\";\nimport Game from  \"./components/Game.js\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div>\n            <link\n              rel=\"stylesheet\"\n              href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\"\n              integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\"\n              crossOrigin=\"anonymous\"\n            />\n            {/*<button onClick={() => this.props.debug()}>DEBUG</button>*/}\n            {/*<button onClick={() => this.props.load()}>Load Words</button>*/}\n            {this.props.db_updated ?\n                <>\n                {this.props.session.key && this.props.session.db_id ?\n                    <Game/>\n                :\n                    <Menu/>\n                }\n                </>\n            :\n                <LoadWords/>\n            }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    db_updated: state.db_updated,\n    session: state.session,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    debug: () => dispatch({\n        type: \"dump_store\",\n        payload: null\n    }),\n    load: () => dispatch({\n        type: \"load_wordlist\",\n        payload: null\n    }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import _ from \"lodash\";\r\nimport firestore from \"../modules/firestore.js\";\r\n\r\nconst initialState = {\r\n    player_name: \"\",\r\n    player_team: \"\",\r\n    players: [],\r\n    teams: {\r\n        red: [],\r\n        blue: []\r\n    },\r\n    db_updated: false,\r\n    version: \"classic\",\r\n    words: {},\r\n    session: {\r\n        key: \"\",\r\n        db_id: \"\"\r\n    },\r\n    stage: \"\",\r\n    round: {\r\n        id: 0,\r\n        words: \"\",\r\n        board: \"\"\r\n    },\r\n    turn: \"\",\r\n    guesses: 0,\r\n    bonus: false,\r\n    score: {\r\n        red: 0,\r\n        blue: 0\r\n    }\r\n};\r\n\r\nconst codeNamesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n    case \"dump_store\": {\r\n        console.log(state);\r\n        return state;\r\n    }\r\n\r\n    // case \"load_wordlist\": {\r\n    //     console.log(state);\r\n    //     let file = \"\";\r\n    //     let words = file.split(\"\\n\").map(item => item.toLowerCase());\r\n    //     console.log(words);\r\n    //     firestore.collection(\"words\").doc(\"QU47JPZITi8eX2f1Q9JJ\").update({\r\n    //         words: words\r\n    //     })\r\n    //     return state;\r\n    // }\r\n\r\n    case \"set_words\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.words = action.payload;\r\n        newState.db_updated = true;\r\n        return newState;\r\n    }\r\n\r\n    case \"set_version\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.version = action.payload;\r\n        return newState;\r\n    }\r\n\r\n    case \"set_session\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.session = action.payload;\r\n        return newState;\r\n    }\r\n\r\n    case \"set_player\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.player_name = action.payload;\r\n        return newState;\r\n    }\r\n\r\n    case \"set_team\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.player_team = action.payload;\r\n        return newState;\r\n    }\r\n\r\n    case \"update_game\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.version = action.payload.version;\r\n        newState.stage = action.payload.stage;\r\n        newState.players = action.payload.players;\r\n        newState.round = action.payload.round;\r\n        newState.turn = action.payload.turn;\r\n        newState.guesses = action.payload.guesses;\r\n        newState.bonus = action.payload.bonus;\r\n        newState.score = action.payload.score;\r\n        if (action.payload.players[action.payload.round.chameleon] === state.player_name) {\r\n            newState.round.role = \"\";\r\n        } else {\r\n            newState.round.role = action.payload.round.word;\r\n        }\r\n        newState.teams = action.payload.teams;\r\n        for (let i in action.payload.teams.red) {\r\n            if (state.player_name === action.payload.teams.red[i]) newState.player_team = \"red\";\r\n        }\r\n        for (let i in action.payload.teams.blue) {\r\n            if (state.player_name === action.payload.teams.blue[i]) newState.player_team = \"blue\";\r\n        }\r\n        return newState;\r\n    }\r\n\r\n    case \"clear_game\": {\r\n        let newState = _.cloneDeep(initialState);\r\n        return newState;\r\n    }\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default codeNamesReducer;\r\n","import {createStore} from \"redux\";\r\n\r\nimport reducer from \"./reducer\";\r\n\r\nexport default function configureStore(initialState) {\r\n    const store = createStore(reducer, initialState);\r\n    return store;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport configureStore from \"./modules/store\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst reduxStore = configureStore(window.REDUX_INITIAL_DATA);\n\nReactDOM.render(<ReduxProvider store={reduxStore}><App /></ReduxProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}