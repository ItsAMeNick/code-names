{"version":3,"sources":["modules/firestore.js","components/LoadWords.js","components/Join.js","components/Host.js","components/Menu.js","components/Game.js","App.js","serviceWorker.js","modules/reducer.js","modules/store.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","LoadWords","props","state","loaded","collection","get","then","resp","words","topic","docs","data","version","setState","setWords","ProgressBar","now","this","label","Component","connect","dispatch","type","payload","Join","player_name","session_key","error_message","where","toUpperCase","length","stage","players","includes","doc","id","update","FieldValue","arrayUnion","setSession","key","setPlayer","cookie","save","db_id","Row","Col","Alert","variant","Form","Label","Control","onChange","e","target","value","Button","onClick","joinGame","name","VALID_CHARS","Host","Math","floor","random","add","teams","red","blue","round","board","ref","hostGame","topics","setRoom","Menu","mode","session","load","Card","Body","Header","genBody","Footer","titleCase","string","sentence","toLowerCase","split","i","slice","join","BASIC_CARD","background","textAlign","CIV_CARD","BLACK_CARD","color","RED_CARD","BLUE_CARD","Game","onSnapshot","includeMetadataChanges","exists","updateGame","remove","clearGame","count","guesses","lobby","game","word","push","Array","fill","used","spot","turn","score","delete","arrayRemove","player_team","r","ListGroup","Item","b","setTeam","Table","bordered","genBoard","giveGuesses","rows","row","map","c","style","newTurn","window","alert","console","log","genFooter","team","App","rel","href","integrity","crossOrigin","debug","db_updated","Boolean","location","hostname","match","initialState","codeNamesReducer","action","file","item","newState","_","cloneDeep","chameleon","role","reduxStore","REDUX_INITIAL_DATA","createStore","reducer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.21f468c3.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport firestore from 'firebase/firestore'; // eslint-disable-line no-unused-vars\r\n\r\nvar firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FS_API_KEY,\r\n    authDomain: process.env.REACT_APP_FS_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_FS_DB_URL,\r\n    projectId: process.env.REACT_APP_FS_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FS_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FS_MESSAGE_ID,\r\n    appId: process.env.REACT_APP_FS_MEASURE_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase.firestore();\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\n\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nclass LoadWords extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        firestore.collection(\"words\").get().then(resp => {\r\n            let words = {}\r\n            for (let topic in resp.docs) {\r\n                let data = resp.docs[topic].data()\r\n                words[data.version] = data.words\r\n            }\r\n            this.setState({loaded: 100})\r\n            this.props.setWords(words)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ProgressBar now={this.state.loaded} label={this.state.loaded+\"%\"}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setWords: (words) => dispatch({\r\n        type: \"set_words\",\r\n        payload: words\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadWords);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\nimport firebase from \"firebase/app\";\r\nimport cookie from \"react-cookies\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nclass Join extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            player_name: \"\",\r\n            session_key: \"\",\r\n            error_message: \"\"\r\n        };\r\n    }\r\n\r\n    joinGame() {\r\n        if (this.state.player_name) {\r\n            if (this.state.session_key) {\r\n                firestore.collection(\"sessions\").where(\"key\", \"==\", this.state.session_key.toUpperCase()).get().then(resp => {\r\n                    if (resp.docs.length === 1) {\r\n                        if (resp.docs[0].data().stage !== \"lobby\") {\r\n                            this.setState({error_message: \"Please wait for the current round to finish before attempting to join.\"})\r\n                        } else if (resp.docs[0].data().players.includes(this.state.player_name)) {\r\n                            this.setState({error_message: \"Player name is unavaliable.\"})\r\n                        } else {\r\n                            firestore.collection(\"sessions\").doc(resp.docs[0].id).update({\r\n                                players: firebase.firestore.FieldValue.arrayUnion(this.state.player_name)\r\n                            })\r\n                            this.props.setSession(resp.docs[0].data().key, resp.docs[0].id);\r\n                            this.props.setPlayer(this.state.player_name);\r\n                            cookie.save(\"cn_session\", {key: resp.docs[0].data().key, db_id: resp.docs[0].id})\r\n                            cookie.save(\"cn_player\", this.state.player_name)\r\n                        }\r\n                    } else {\r\n                        this.setState({error_message: \"Session key does not exist.\"})\r\n                    }\r\n                })\r\n            } else {\r\n                this.setState({error_message: \"Enter a session key.\"})\r\n            }\r\n        } else {\r\n            this.setState({error_message: \"Enter a Name!\"})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.error_message ?\r\n                    <Row><Col>\r\n                        <Alert variant=\"danger\">\r\n                            {this.state.error_message}\r\n                        </Alert>\r\n                    </Col></Row>\r\n                : null}\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label> Session Key: </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control onChange={(e) => this.setState({session_key: e.target.value})}/>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label> Player Name: </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control onChange={(e) => this.setState({player_name: e.target.value})}/>\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                <Row>\r\n                    <Button onClick={() => this.joinGame()}>\r\n                        Join Game\r\n                    </Button>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setSession: (key, db_id) => dispatch({\r\n        type: \"set_session\",\r\n        payload: {\r\n            key: key,\r\n            db_id: db_id\r\n        }\r\n    }),\r\n    setPlayer: (name) => dispatch({\r\n        type: \"set_player\",\r\n        payload: name\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Join);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\nimport cookie from \"react-cookies\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst VALID_CHARS = \"ABCDEFGHJKLMNOPQRSTUVWXYZ98765432\"\r\n\r\nclass Host extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            player_name: \"\",\r\n            error_message: \"\"\r\n        };\r\n    }\r\n\r\n    hostGame() {\r\n        if (this.state.player_name) {\r\n            let key = VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)] + VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)] + VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)] + VALID_CHARS[Math.floor(Math.random()*VALID_CHARS.length)]\r\n            firestore.collection(\"sessions\").add({\r\n                players: [this.state.player_name],\r\n                teams: {red: [], blue: []},\r\n                key: key,\r\n                stage: \"lobby\",\r\n                round: {\r\n                    id: 0,\r\n                    words: [],\r\n                    board: []\r\n                }\r\n            }).then(ref => {\r\n                this.props.setSession(key, ref.id)\r\n                this.props.setPlayer(this.state.player_name);\r\n                cookie.save(\"cn_session\", {key: key, db_id: ref.id})\r\n                cookie.save(\"cn_player\", this.state.player_name)\r\n            })\r\n        } else {\r\n            this.setState({error_message: \"Enter a Name!\"})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.error_message ?\r\n                    <Row><Col>\r\n                        <Alert variant=\"danger\">\r\n                            {this.state.error_message}\r\n                        </Alert>\r\n                    </Col></Row>\r\n                : null}\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label> Player Name: </Form.Label>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control onChange={(e) => this.setState({player_name: e.target.value})}/>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Button onClick={() => this.hostGame()}>\r\n                        Host Game\r\n                    </Button>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    topics: state.topics\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setRoom: (topics) => dispatch({\r\n        type: \"set_topics\",\r\n        payload: topics\r\n    }),\r\n    setSession: (key, db_id) => dispatch({\r\n        type: \"set_session\",\r\n        payload: {\r\n            key: key,\r\n            db_id: db_id\r\n        }\r\n    }),\r\n    setPlayer: (name) => dispatch({\r\n        type: \"set_player\",\r\n        payload: name\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Host);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport cookie from \"react-cookies\";\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport Join from \"./Join.js\";\r\nimport Host from \"./Host.js\"\r\n\r\nclass Menu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let session = cookie.load(\"cn_session\");\r\n        let name = cookie.load(\"cn_player\");\r\n        if (session && session.key && session.db_id && name) {\r\n                this.props.setSession(session);\r\n                this.props.setPlayer(name);\r\n        }\r\n    }\r\n\r\n    genBody() {\r\n        switch(this.state.mode) {\r\n            case \"join\":\r\n                return (\r\n                    <Card.Body>\r\n                        <Join/>\r\n                    </Card.Body>\r\n                );\r\n            case \"host\":\r\n                return (\r\n                    <Card.Body>\r\n                        <Host/>\r\n                    </Card.Body>\r\n                );\r\n            default:\r\n                return (\r\n                    <Card.Body>\r\n                    <Row>\r\n                        <Col/>\r\n                        <Col>\r\n                            <Button variant=\"success\" onClick={() => this.setState({mode: \"join\"})}>\r\n                                Join\r\n                            </Button>\r\n                        </Col>\r\n                        <Col/>\r\n                        <Col>\r\n                            <Button variant=\"warning\" onClick={() => this.setState({mode: \"host\"})}>\r\n                                Host\r\n                            </Button>\r\n                        </Col>\r\n                        <Col/>\r\n                    </Row>\r\n                    </Card.Body>\r\n                );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Card.Header>\r\n                        Code Names\r\n                    </Card.Header>\r\n                    {this.genBody()}\r\n                    <Card.Footer>\r\n                        {this.state.mode !== \"\" ?\r\n                            <Button variant=\"dark\" onClick={() => this.setState({mode: \"\"})}>\r\n                                Back\r\n                            </Button>\r\n                        :\r\n                            null\r\n                        }\r\n                    </Card.Footer>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setSession: (session) => dispatch({\r\n        type: \"set_session\",\r\n        payload: session\r\n    }),\r\n    setPlayer: (name) => dispatch({\r\n        type: \"set_player\",\r\n        payload: name\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport firestore from \"../modules/firestore.js\";\r\nimport cookie from \"react-cookies\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nfunction titleCase(string) {\r\n    if (!string) return \"\";\r\n    let sentence = string.toLowerCase().split(\" \");\r\n    for(let i = 0; i< sentence.length; i++){\r\n        sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\r\n    }\r\n    return sentence.join(\" \");\r\n}\r\n\r\nconst BASIC_CARD = {\r\n    background: \"white\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst CIV_CARD = {\r\n    background: \"#ffeecc\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst BLACK_CARD = {\r\n    background: \"black\",\r\n    color: \"white\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst RED_CARD = {\r\n    background: \"#ffb3b3\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst BLUE_CARD = {\r\n    background: \"#99c2ff\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Set up listener (May need to put this in a promise later)\r\n        firestore.collection(\"sessions\").doc(this.props.session.db_id)\r\n            .onSnapshot({includeMetadataChanges: true}, (doc) => {\r\n                if (doc.exists) {\r\n                    this.props.updateGame(doc.data());\r\n                } else {\r\n                    cookie.remove(\"cn_player\");\r\n                    cookie.remove(\"cn_session\");\r\n                    this.props.clearGame();\r\n                }\r\n            })\r\n    }\r\n\r\n    giveGuesses(count) {\r\n        firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n            guesses: count\r\n        })\r\n    }\r\n\r\n    genBody() {\r\n        switch(this.props.stage) {\r\n            case \"lobby\":\r\n                return this.lobby();\r\n            case \"game\":\r\n                return this.game();\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    genFooter() {\r\n        switch(this.props.stage) {\r\n            case \"lobby\":\r\n                if (this.props.players[0] === this.props.player_name) {\r\n                    //HOST ONLY\r\n                    return (<Row>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                //Start Game\r\n                                let words = [];\r\n                                // console.log(this.props.words[this.props.version])\r\n                                while (words.length < 25) {\r\n                                    let word = this.props.words[this.props.version][Math.floor(Math.random()*this.props.words[this.props.version].length)];\r\n                                    if (!words.includes(word)) {\r\n                                        words.push(word)\r\n                                    }\r\n                                }\r\n                                // console.log(words);\r\n                                let board = Array(25).fill(\"C\");\r\n                                let used = []\r\n                                let spot = Math.floor(Math.random()*25);\r\n                                board[spot] = \"A\";\r\n                                used.push(spot);\r\n                                while (used.length < 10) {\r\n                                    spot = Math.floor(Math.random()*25);\r\n                                    if (!used.includes(spot)) {\r\n                                        used.push(spot);\r\n                                        board[spot] = (this.props.round.id % 2) ? \"B\" : \"R\";\r\n                                    }\r\n                                }\r\n                                while (used.length < 18) {\r\n                                    spot = Math.floor(Math.random()*25);\r\n                                    if (!used.includes(spot)) {\r\n                                        used.push(spot);\r\n                                        board[spot] = (this.props.round.id % 2) ? \"R\" : \"B\";\r\n                                    }\r\n                                }\r\n                                // console.log(board)\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                    stage: \"game\",\r\n                                    \"round.words\": words,\r\n                                    \"round.board\": board,\r\n                                    \"round.guesses\": Array(25).fill(\"\"),\r\n                                    turn: (this.props.round.id % 2) ? \"B\" : \"R\",\r\n                                    guesses: 0,\r\n                                    score: {red: 0, blue: 0},\r\n                                })\r\n                            }}>Start Game</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                //End Game\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).delete()\r\n                            }}>End Game</Button>\r\n                        </Col>\r\n                    </Row>)\r\n                } else {\r\n                    return (<Button onClick={() => {\r\n                        firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                            players: firebase.firestore.FieldValue.arrayRemove(this.props.player_name),\r\n                            \"teams.red\": firebase.firestore.FieldValue.arrayRemove(this.props.player_name),\r\n                            \"teams.blue\": firebase.firestore.FieldValue.arrayRemove(this.props.player_name)\r\n                        }).then(() => {\r\n                            cookie.remove(\"cn_player\");\r\n                            cookie.remove(\"cn_session\");\r\n                            this.props.clearGame();\r\n                        })\r\n                    }}>\r\n                        Leave Game\r\n                    </Button>)\r\n                }\r\n            case \"game\":\r\n                if (this.props.players[0] === this.props.player_name) {\r\n                    //HOST ONLY\r\n                    return (<Row>\r\n                        <Col>\r\n                            <Button onClick={() => {\r\n                                firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                    stage: \"lobby\",\r\n                                })\r\n                            }}>\r\n                                Return to Lobby\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>)\r\n                }\r\n                break;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    lobby() {\r\n        let lobby = [];\r\n        if (this.props.player_team) {\r\n            lobby.push(<Alert variant=\"info\" key=\"code\">{\"Room Code: \"+this.props.session.key}</Alert>)\r\n            for (let r in this.props.teams.red) {\r\n                lobby.push(<ListGroup.Item  variant=\"danger\" key={this.props.teams.red[r]}>\r\n                    {this.props.teams.red[r]}\r\n                </ListGroup.Item>)\r\n            }\r\n            for (let b in this.props.teams.blue) {\r\n                lobby.push(<ListGroup.Item  variant=\"primary\" key={this.props.teams.blue[b]}>\r\n                    {this.props.teams.blue[b]}\r\n                </ListGroup.Item>)\r\n            }\r\n        } else {\r\n            lobby.push(<Row key=\"pick_team\">\r\n                <Col>\r\n                    <Button variant=\"danger\" onClick={() => {\r\n                        firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                            \"teams.red\": firebase.firestore.FieldValue.arrayUnion(this.props.player_name),\r\n                        }).then(() => {\r\n                            this.props.setTeam(\"red\");\r\n                        });\r\n                    }}>\r\n                        Join RED Team\r\n                    </Button>\r\n                </Col>\r\n                    <Button variant=\"primary\" onClick={() => {\r\n                        firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                            \"teams.blue\": firebase.firestore.FieldValue.arrayUnion(this.props.player_name),\r\n                        }).then(() => {\r\n                            this.props.setTeam(\"blue\")\r\n                        });\r\n                    }}>\r\n                        Join BLUE Team\r\n                    </Button>\r\n                <Col>\r\n                </Col>\r\n            </Row>)\r\n        }\r\n        return lobby;\r\n    }\r\n\r\n    game() {\r\n        let game = []\r\n        game.push(<Row key={\"you\"}>\r\n            <Col>\r\n                <Alert variant={this.props.player_team === \"red\" ? \"danger\" : \"primary\"}>\r\n                    {(((this.props.teams.red[this.props.round.id % this.props.teams.red.length] === this.props.player_name) || (this.props.teams.blue[this.props.round.id % this.props.teams.blue.length] === this.props.player_name)) ? \"Codemaster \" : \"Agent \") + titleCase(this.props.player_name)}\r\n                </Alert>\r\n            </Col>\r\n        </Row>);\r\n        game.push(<Row key={\"scores\"}>\r\n            <Col>\r\n                <Alert variant=\"dark\">\r\n                    {\"Red Score: \" + this.props.score.red}\r\n                </Alert>\r\n            </Col>\r\n            <Col>\r\n                <Alert variant=\"dark\">\r\n                    {\"Blue Score: \" + this.props.score.blue}\r\n                </Alert>\r\n            </Col>\r\n        </Row>);\r\n        game.push(<Row key=\"board+role\">\r\n            <Col>\r\n                <Table bordered>\r\n                    <tbody>\r\n                        {this.genBoard()}\r\n                    </tbody>\r\n                </Table>\r\n            </Col>\r\n        </Row>)\r\n        game.push(<Row key={\"players\"}>\r\n            <Col>\r\n                <Alert variant=\"dark\">{this.props.guesses === 0 ? (this.props.turn===\"R\" ? \"Red\":\"Blue\")+\" Codemaster is giving a hint.\" : (this.props.turn===\"R\" ? \"Red\":\"Blue\")+\" team is making guesses.\"}</Alert>\r\n            </Col>\r\n        </Row>);\r\n        if (this.props.guesses === 0 && ((this.props.turn===\"R\" ? \"red\":\"blue\") === this.props.player_team) && ((this.props.teams.red[this.props.round.id % this.props.teams.red.length] === this.props.player_name) || (this.props.teams.blue[this.props.round.id % this.props.teams.blue.length] === this.props.player_name))) {\r\n            game.push(<div key={\"guesses\"}>\r\n                {((((this.props.turn === \"R\") && (this.props.teams.red[this.props.round.id % this.props.teams.red.length] === this.props.player_name))\r\n                || ((this.props.turn === \"B\") && (this.props.teams.blue[this.props.round.id % this.props.teams.blue.length] === this.props.player_name)))\r\n                && (this.props.guesses === 0)) ?\r\n                    <Row>\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 9 : 8)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 9 : 8)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(1);\r\n                            }}>1</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 8 : 7)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 8 : 7)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(2);\r\n                            }}>2</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 7 : 6)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 7 : 6)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(3);\r\n                            }}>3</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 6 : 5)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 6 : 5)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(4);\r\n                            }}>4</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 5 : 4)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 5 : 4)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(5);\r\n                            }}>5</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 4 : 3)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 4 : 3)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(6);\r\n                            }}>6</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 3 : 2)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 3 : 2)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(7);\r\n                            }}>7</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 2 : 1)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 2 : 1)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(8);\r\n                            }}>8</Button>\r\n                        </Col>\r\n                    : null}\r\n                    {(((this.props.turn === \"R\") && (this.props.score.red < (!(this.props.round.id % 2) ? 1 : 0)))\r\n                    || ((this.props.turn === \"B\") && (this.props.score.blue < ((this.props.round.id % 2) ? 1 : 0)))) ?\r\n                        <Col>\r\n                            <Button variant=\"secondary\" onClick={() => {\r\n                                this.giveGuesses(9);\r\n                            }}>9</Button>\r\n                        </Col>\r\n                    : null}\r\n                    </Row>\r\n                : null}\r\n            </div>);\r\n        }\r\n        game.push(<div key={\"guesses_remaining\"}>\r\n            {this.props.guesses > 0 ?\r\n                <Row>\r\n                    <Col>\r\n                        <Alert variant=\"dark\">{(this.props.turn===\"R\" ? \"Red\":\"Blue\")+\" team has \" + this.props.guesses + \" guesses remaining.\"}</Alert>\r\n                    </Col>\r\n                </Row>\r\n            : null}\r\n        </div>);\r\n        return game;\r\n    }\r\n\r\n    genBoard() {\r\n        let rows = []\r\n        //if codemaster\r\n        if ((this.props.teams.red[this.props.round.id % this.props.teams.red.length] === this.props.player_name) || (this.props.teams.blue[this.props.round.id % this.props.teams.blue.length] === this.props.player_name)) {\r\n            for (let r in [0,1,2,3,4]) {\r\n                let row = <tr key={\"r\"+r}>\r\n                    {[0,1,2,3,4].map((c) => {\r\n                        let style = CIV_CARD;\r\n                        if (this.props.round.board[r*5 + c] === \"A\") {\r\n                            style = BLACK_CARD;\r\n                        } else if (this.props.round.board[r*5 + c] === \"R\") {\r\n                            style = RED_CARD;\r\n                        } else if (this.props.round.board[r*5 + c] === \"B\") {\r\n                            style = BLUE_CARD;\r\n                        }\r\n                        return <td id={r*4 + c} style={style} key={\"i\"+(r*5 + c)}>\r\n                            <strong>{titleCase(this.props.round.words[r*5 + c])}</strong>\r\n                        </td>\r\n                    })}\r\n                </tr>\r\n                rows.push(row)\r\n            }\r\n        } else {\r\n            for (let r in [0,1,2,3,4]) {\r\n                let row = <tr key={\"r\"+r}>\r\n                    {[0,1,2,3,4].map((c) => {\r\n                        let style = BASIC_CARD;\r\n                        if (this.props.round.guesses[r*5 + c]) {\r\n                            if (this.props.round.board[r*5 + c] === \"A\") {\r\n                                style = BLACK_CARD;\r\n                            } else if (this.props.round.board[r*5 + c] === \"R\") {\r\n                                style = RED_CARD;\r\n                            } else if (this.props.round.board[r*5 + c] === \"B\") {\r\n                                style = BLUE_CARD;\r\n                            } else {\r\n                                style = CIV_CARD;\r\n                            }\r\n                        }\r\n                        return <td id={r*5 + c} style={style} key={\"i\"+(r*5 + c)}\r\n                        onClick={()=> {\r\n                            if ((this.props.turn === \"R\" && this.props.player_team === \"red\") || (this.props.turn === \"B\" && this.props.player_team === \"blue\")) {//Verify that you can actually make the guess (avoid errors on simult guessing)\r\n                            firestore.collection(\"sessions\").doc(this.props.session.db_id).get().then(doc => {\r\n                                let data = doc.data();\r\n                                let newTurn = (data.turn === \"R\") ? \"R\" : \"B\";\r\n                                if (data.guesses > 0 && !data.round.guesses[r*5 + c]) {\r\n                                    data.round.guesses[r*5 + c] = \"X\";\r\n                                    data.guesses = data.guesses - 1;\r\n                                    switch (data.round.board[r*5 + c]) {\r\n                                        case \"A\": {\r\n                                            window.alert(\"YOU LOSE! That was the assassin word.\")\r\n                                            data.guesses = 0;\r\n                                            data.stage = \"lobby\";\r\n                                            data.round.id = data.round.id + 1\r\n                                            break;\r\n                                        }\r\n                                        case \"R\": {\r\n                                            data.score.red += 1;\r\n                                            console.log(this.props.player_team)\r\n                                            if (this.props.player_team === \"blue\") {\r\n                                                newTurn = \"R\";\r\n                                                data.guesses = 0;\r\n                                            }\r\n                                            break;\r\n                                        }\r\n                                        case \"B\": {\r\n                                            data.score.blue += 1;\r\n                                            if (this.props.player_team === \"red\") {\r\n                                                newTurn = \"B\";\r\n                                                data.guesses = 0;\r\n                                            }\r\n                                            break;\r\n                                        }\r\n                                        case \"C\": {\r\n                                            if (data.turn === \"R\") {\r\n                                                newTurn = \"B\";\r\n                                                data.guesses = 0;\r\n                                            } else {\r\n                                                newTurn = \"R\";\r\n                                                data.guesses = 0;\r\n                                            }\r\n                                            break;\r\n                                        }\r\n                                        default: {\r\n                                            console.log(\"AHH\");\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    console.log(data.guesses)\r\n                                    if (data.guesses - 1 < 0) {\r\n                                        console.log(\"No guesses!\")\r\n                                        newTurn = (this.props.player_team === \"blue\") ? \"R\" : \"B\";\r\n                                    }\r\n                                    if (data.score.red >= (!(this.props.round.id % 2) ? 9 : 8) || data.score.blue >= ((this.props.round.id % 2) ? 9 : 8)) {\r\n                                        window.alert(\"YOU WIN! That was the final word.\")\r\n                                        data.stage = \"lobby\";\r\n                                        data.round.id = data.round.id + 1\r\n                                    }\r\n                                    firestore.collection(\"sessions\").doc(this.props.session.db_id).update({\r\n                                        guesses: data.guesses,\r\n                                        \"round.guesses\": data.round.guesses,\r\n                                        turn: newTurn,\r\n                                        score: data.score,\r\n                                        stage: data.stage,\r\n                                        \"round.id\": data.round.id\r\n                                    })\r\n                                }\r\n                            })}\r\n                        }}>\r\n                            <strong>{titleCase(this.props.round.words[r*5 + c])}</strong>\r\n                        </td>\r\n                    })}\r\n                </tr>\r\n                rows.push(row)\r\n            }\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Card.Header>\r\n                        {titleCase(this.props.stage)}\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        {this.genBody()}\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        {this.genFooter()}\r\n                    </Card.Footer>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    session: state.session,\r\n    player_name: state.player_name,\r\n    player_team: state.player_team,\r\n    stage: state.stage,\r\n    players: state.players,\r\n    teams: state.teams,\r\n    words: state.words,\r\n    version: state.version,\r\n    round: state.round,\r\n    turn: state.turn,\r\n    guesses: state.guesses,\r\n    score: state.score,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateGame: (doc) => dispatch({\r\n        type: \"update_game\",\r\n        payload: doc\r\n    }),\r\n    clearGame: () => dispatch({\r\n        type: \"clear_game\",\r\n        payload: null\r\n    }),\r\n    setTeam: (team) => dispatch({\r\n        type: \"set_team\",\r\n        payload: team\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\r\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\n\nimport LoadWords from \"./components/LoadWords.js\";\nimport Menu from \"./components/Menu.js\";\nimport Game from  \"./components/Game.js\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div>\n            <link\n              rel=\"stylesheet\"\n              href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\"\n              integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\"\n              crossOrigin=\"anonymous\"\n            />\n            <button onClick={() => this.props.debug()}>DEBUG</button>\n            {/*<button onClick={() => this.props.load()}>Load Words</button>*/}\n            {this.props.db_updated ?\n                <>\n                {this.props.session.key && this.props.session.db_id ?\n                    <Game/>\n                :\n                    <Menu/>\n                }\n                </>\n            :\n                <LoadWords/>\n            }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    db_updated: state.db_updated,\n    session: state.session,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    debug: () => dispatch({\n        type: \"dump_store\",\n        payload: null\n    }),\n    load: () => dispatch({\n        type: \"load_wordlist\",\n        payload: null\n    }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import _ from \"lodash\";\r\nimport firestore from \"../modules/firestore.js\";\r\n\r\nconst initialState = {\r\n    player_name: \"\",\r\n    player_team: \"\",\r\n    players: [],\r\n    teams: {\r\n        red: [],\r\n        blue: []\r\n    },\r\n    db_updated: false,\r\n    version: \"classic\",\r\n    words: {},\r\n    session: {\r\n        key: \"\",\r\n        db_id: \"\"\r\n    },\r\n    stage: \"\",\r\n    round: {\r\n        id: 0,\r\n        words: \"\",\r\n        board: \"\"\r\n    },\r\n    turn: \"\",\r\n    guesses: 0,\r\n    score: {\r\n        red: 0,\r\n        blue: 0\r\n    }\r\n};\r\n\r\nconst codeNamesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n    case \"dump_store\": {\r\n        console.log(state);\r\n        return state;\r\n    }\r\n\r\n    case \"load_wordlist\": {\r\n        console.log(state);\r\n        let file = \"\";\r\n        let words = file.split(\"\\n\").map(item => item.toLowerCase());\r\n        console.log(words);\r\n        firestore.collection(\"words\").doc(\"WuyqyBh1ecLt16urvTS2\").update({\r\n            words: words\r\n        })\r\n        return state;\r\n    }\r\n\r\n    case \"set_words\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.words = action.payload;\r\n        newState.db_updated = true;\r\n        return newState;\r\n    }\r\n\r\n    case \"set_session\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.session = action.payload;\r\n        return newState;\r\n    }\r\n\r\n    case \"set_player\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.player_name = action.payload;\r\n        return newState;\r\n    }\r\n\r\n    case \"set_team\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.player_team = action.payload;\r\n        return newState;\r\n    }\r\n\r\n    case \"update_game\": {\r\n        let newState = _.cloneDeep(state);\r\n        newState.stage = action.payload.stage;\r\n        newState.players = action.payload.players;\r\n        newState.round = action.payload.round;\r\n        newState.turn = action.payload.turn;\r\n        newState.guesses = action.payload.guesses;\r\n        newState.score = action.payload.score;\r\n        if (action.payload.players[action.payload.round.chameleon] === state.player_name) {\r\n            newState.round.role = \"\";\r\n        } else {\r\n            newState.round.role = action.payload.round.word;\r\n        }\r\n        newState.teams = action.payload.teams;\r\n        for (let i in action.payload.teams.red) {\r\n            if (state.player_name === action.payload.teams.red[i]) newState.player_team = \"red\";\r\n        }\r\n        for (let i in action.payload.teams.blue) {\r\n            if (state.player_name === action.payload.teams.blue[i]) newState.player_team = \"blue\";\r\n        }\r\n        return newState;\r\n    }\r\n\r\n    case \"clear_game\": {\r\n        let newState = _.cloneDeep(initialState);\r\n        return newState;\r\n    }\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default codeNamesReducer;\r\n","import {createStore} from \"redux\";\r\n\r\nimport reducer from \"./reducer\";\r\n\r\nexport default function configureStore(initialState) {\r\n    const store = createStore(reducer, initialState);\r\n    return store;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport configureStore from \"./modules/store\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst reduxStore = configureStore(window.REDUX_INITIAL_DATA);\n\nReactDOM.render(<ReduxProvider store={reduxStore}><App /></ReduxProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}